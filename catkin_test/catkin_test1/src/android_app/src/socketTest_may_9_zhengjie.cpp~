#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdlib.h>
#include <iostream>
#include <stdio.h>
#include <pthread.h>

#include "ros/ros.h"
#include "std_msgs/String.h"
#include <sstream>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>
#include "sensor_msgs/LaserScan.h"
#include "actionlib_msgs/GoalID.h"

//#include <geometry_msgs/Point.h>

#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

#define HOSTPORT			9400
#define MAX_CONNECTION	5
#define MAX_BUFFER 1024

#define STOP			0
#define GO			1
#define BACK			2
#define LEFT			3
#define RIGHT			4
#define TURN			5
#define EXIT			6


#define omin_navigation            'q'
#define omin_follow                'w'
#define omin_android_tele          'e'

#define close_omin_navigation      'a'
#define close_omin_follow          's'
#define close_omin_android_tele     'd'

using namespace std;

static int cmd1,lastcmd1;
char command[10];
int num=10000;
ros::Publisher vel_pub;
ros::Publisher cancle_pub;
ros::Publisher goal_pub;
ros::Subscriber sub;
ros::Subscriber sub_laser;
double currect_x=0;
double currect_y=0;
double current_orientation_z=0;
double current_orientation_omiga=0;

 int goal_x ; int goal_y;
        int a ; int b; int c ; int d; int r; int t;
        char fg;




        int server_socket_fd;
        int client_socket_fd;
        socklen_t len;
        struct sockaddr_in server_addr;
        struct sockaddr_in client_addr;


/*
int setgoal(int goal_x, int goal_y ){
//tell the action client that we want to spin a thread by default

  MoveBaseClient ac("move_base", true);
 // std::cout<<"2222222222222222222"<<std::endl;


  //wait for the action server to come up
  while(!ac.waitForServer(ros::Duration(5.0))){
   while(ros::ok()){
    ROS_INFO("Waiting for the move_base action server to come up");
   // std::cout<<"33333333333333333333"<<std::endl;
   }
   //return 0;
  }


  move_base_msgs::MoveBaseGoal goal;

  //we'll send a goal to the robot to move 1 meter forward
  goal.target_pose.header.frame_id = "map";
  goal.target_pose.header.stamp = ros::Time::now();
  goal.target_pose.pose.position.x = goal_x;
  goal.target_pose.pose.position.y = goal_y;
  //goal.target_pose.pose.position.x = x;
  //goal.target_pose.pose.position.y = y;
  goal.target_pose.pose.orientation.w = 1.0;

  ROS_INFO("Sending goal");

  ac.sendGoal(goal);


//  ac.waitForResult();

  //if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
   // ROS_INFO("Hooray, the base moved 1 meter forward");
  //else
    //ROS_INFO("The base failed to move forward 1 meter for some reason");

  return 0;
}
*/

int setgoal(double goal_x, double goal_y,double goal_orientation_z,double goal_orientation_omiga){
//tell the action client that we want to spin a thread by default

  MoveBaseClient ac("move_base", true);
 // std::cout<<"2222222222222222222"<<std::endl;
  //wait for the action server to come up
  while(!ac.waitForServer(ros::Duration(5.0))){
   while(ros::ok()){
    ROS_INFO("Waiting for the move_base action server to come up");
   // std::cout<<"33333333333333333333"<<std::endl;
   }
   //return 0;
  }


  move_base_msgs::MoveBaseGoal goal;

  //we'll send a goal to the robot to move 1 meter forward
  goal.target_pose.header.frame_id = "map";
  goal.target_pose.header.stamp = ros::Time::now();
  goal.target_pose.pose.position.x = goal_x;
  goal.target_pose.pose.position.y = goal_y;
  //goal.target_pose.pose.position.x = x;
  //goal.target_pose.pose.position.y = y;
  goal.target_pose.pose.orientation.z=goal_orientation_z;
  goal.target_pose.pose.orientation.w = goal_orientation_omiga;
ROS_INFO("current_x:%f   current_y:%f   current_z:%f, current_w:%f",goal_x,goal_y,goal_orientation_z,goal_orientation_omiga);

  ROS_INFO("Sending goal");

  ac.sendGoal(goal);

  ac.waitForResult();

  if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
    ROS_INFO("Hooray, the base moved 1 meter forward");
  else
    ROS_INFO("The base failed to move forward 1 meter for some reason");

  return 0;
}


void setgoal(float goal_x, float goal_y)
{
	geometry_msgs::PoseStamped msg;
	msg.header.frame_id = "map";
	msg.header.stamp = ros::Time::now();
	msg.pose.position.x=goal_x;
	msg.pose.position.y=goal_y;
	msg.pose.orientation.w=1;
	goal_pub.publish(msg);
cout<<"goal_x:%d "<<goal_x<<"goal_y:%d "<<goal_y<<endl;

}

void *thread_control( void *arg )
{

	
	int command_change;
	float x; float y ; float z ;
	cout<<"Enter the thread_control \n"<<endl;
	
	while(1)
	{ 
        geometry_msgs::Twist msg;
        if(num ==2){
        if (lastcmd1!=cmd1)
        {
	//cout<<"11111111111111111"<<endl;
                switch( cmd1 )
		{
						case STOP :
							{
								x=0;y=0;z=0;
                                                                   msg.linear.x=x;
                                                                   msg.linear.y=y;
                                                                  msg.angular.z=z;    

								break;
							}
						case GO :
							{
								x=0.6;y=0;z=0;
                                                                   msg.linear.x=x;
                                                                   msg.linear.y=y;
                                                                  msg.angular.z=z;  
								break;
							}
						case BACK :
							{
								x=-0.6;y=0;z=0;
                                                                   msg.linear.x=x;
                                                                   msg.linear.y=y;
                                                                  msg.angular.z=z;  
								break;
							}						
						case LEFT :
							{
								x=0;y=-0.6;z=0;
                                                                   msg.linear.x=x;
                                                                   msg.linear.y=y;
                                                                  msg.angular.z=z;  
								break;
							}						
						case RIGHT :
							{
								x=0;y=0.6;z=0;
                                                                   msg.linear.x=x;
                                                                   msg.linear.y=y;
                                                                  msg.angular.z=z;  
								break;

							}
						case TURN :
							{
								x=0;y=0;z=1.5;
                                                                   msg.linear.x=x;
                                                                   msg.linear.y=y;
                                                                  msg.angular.z=z;  
								break;
							}

						default:
							{

								x=0;y=0;z=0;
                                                                   msg.linear.x=x;
                                                                   msg.linear.y=y;
                                                                  msg.angular.z=z;  
								break;
							}
                  }  
            vel_pub.publish(msg);
            //cout<<"x:"<<x<<"y:"<<y<<"z:"<<z<<endl;
        }
        else if(num==0)
        {
            	//pthread_exit( NULL );
		return (NULL);
        }
        else
        {
		//cout<<"222222222222222222"<<endl;
		x=0;y=0;z=0;
                msg.linear.x=x;
                msg.linear.y=y;
                msg.angular.z=z;  
                 vel_pub.publish(msg);
          //  cout<<"x:"<<x<<"y:"<<y<<"z:"<<z<<endl;
        }
        }
		
	}
}


void *receive_data_callback( void *arg )
{

	while(ros::ok())
	{
	//receive_command( );
		  std::cout<<"receive..."<<std::endl;
                 num = recv( client_socket_fd , &command , sizeof( command ), 0);
                if (num == 1)
                {
		  //std::cout<<command[0]<<std::endl;
                  fg=command[0];

                  switch( fg )
 		  {
			case omin_navigation:
			{
//			system("gnome-terminal -x /home/jie/catkin_ws/src/omin_robot/launch/omin_navigation.sh");std::cout<<"navvvvvvvvvvvvvvvvvvvvvvv"<<num<<std::endl;
//set up the goal
//disable follower
//cancel all goals before
 std::cout<<"Navigation before 2222222222222222222"<<std::endl;

actionlib_msgs::GoalID first_goal;

cancle_pub.publish(first_goal);


 //MoveBaseClient ac("move_base", true);
//ac.cancelAllGoals();

 std::cout<<"Navigation 2222222222222222222"<<std::endl;

ros::param::set("/turtlebot_follower/enabled",false);
//disable manual control
break;}
			case omin_follow:
			{
				//system("gnome-terminal -x /home/jie/catkin_ws/src/omin_robot/launch/omin_follow.sh");std::cout<<"folllllllllllllllllllll"<<num<<std::endl; 
//enable follower
ros::param::set("/turtlebot_follower/enabled",true);
//cancel navigation goal
//set current pose to the goal, so the robot will stop navigation
//setgoal(currect_x,currect_y,current_orientation_z,current_orientation_omiga);
actionlib_msgs::GoalID first_goal;

cancle_pub.publish(first_goal);
//  MoveBaseClient ac("move_base", true);
//ac.cancelAllGoals();

    ROS_INFO("Goal reached, and the robot will follow\n");
//disable manual control

break;}
			case omin_android_tele:
			{
			//	system("gnome-terminal -x /home/jie/catkin_ws/src/omin_robot/launch/omin_teleop.sh");
//cancel navigation goal
//setgoal(currect_x,currect_y,current_orientation_z,current_orientation_omiga);
actionlib_msgs::GoalID first_goal;
cancle_pub.publish(first_goal);

//  MoveBaseClient ac("move_base", true);
//ac.cancelAllGoals();

    ROS_INFO("Goal reached, and the robot will be manually controlled\n");
//disable follower
ros::param::set("/turtlebot_follower/enabled",false);
//enable manual control
                         std::cout<<"telllllllllllllllllllllllllll"<<num<<std::endl; break;}						
						
			default:
			{
				break;}
		  }

		}
                else if(num==2) {
                cmd1=command[0]-'0';
                }
                else if(num==6){
                std::cout<<"r="<<command[0]<<"a="<<command[1]<<"b="<<command[2]<<"t="<<command[3]<<"c="<<command[4]<<"d="<<command  [5]<<std::endl;
                r=command[0]-'0';
                a=command[1]-'0';
                b=command[2]-'0';
                t=command[3]-'0';
                c=command[4]-'0';
                d=command[5]-'0';
                if(r==0){
                goal_x=-(b+a*10);
                }
                else{
                goal_x=(b+a*10);
                }
                if(t==0){
                goal_y=-(d+c*10);
                }
                else{
                goal_y=(d+c*10);
                }
             std::cout<<"r="<<r<<"a="<<a<<"b="<<b<<"t="<<t<<"c="<<c<<"d="<<d<<std::endl;
             //x=a+b*10;
             //y=c+b*10;
             std::cout<<"x="<<goal_x<<"y="<<goal_y<<std::endl;

            // setgoal(goal_x,goal_y);
		setgoal(5.5,0);

                
             }   

             else if (num==0)
             {
		close( client_socket_fd );
                close( server_socket_fd );
		close( client_socket_fd );
                close( server_socket_fd );
		close( client_socket_fd );
                close( server_socket_fd );
	        return 0; 
std::cout<<" client_socket_fd :server_socket_fd"<<std::endl;
	     }
             std::cout<<"num:"<<num<<std::endl;
              //  publish();	
	}
}
void create_all_thread(void)
{
	pthread_t control_thread ;

	pthread_t receive_data_thread ;
	
	if( (pthread_create( &control_thread , NULL , thread_control , NULL )) != 0 )
	{
		perror("Create the thread_control fail");
		exit( 1 );
	}

	if( (pthread_create( &receive_data_thread , NULL , receive_data_callback , NULL )) != 0 )
	{
		perror("Create the receive_data_thread fail");
		exit( 1 );
	}



	
}

void amclPoseCallback(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr& msg)
{


currect_x=msg->pose.pose.position.x;
currect_y=msg->pose.pose.position.y;
current_orientation_z=msg->pose.pose.orientation.z;
current_orientation_omiga=msg->pose.pose.orientation.w;

ROS_INFO("call back current_x:%f   current_y:%f   current_z:%f current_w:%f",currect_x,currect_y,current_orientation_z,current_orientation_omiga);

}



int main(int argc,char** argv)
{

	ros::init(argc, argv, "socketTest");
        ros::NodeHandle n;
       
	sub=n.subscribe("amcl_pose",1000,amclPoseCallback);
       cancle_pub = n.advertise<actionlib_msgs::GoalID>("move_base/cancel",1);
        vel_pub = n.advertise<geometry_msgs::Twist>("/mobile_base/commands/velocity", 10);
       goal_pub = n.advertise<geometry_msgs::PoseStamped>("/move_base_simple/goal",1);

        cmd1=0;
        lastcmd1=0;
	server_socket_fd = socket(AF_INET, SOCK_STREAM, 0);      
	if ( server_socket_fd == -1 )  
	{
        perror("get host_socket_fd error");
		exit(1);
	}

	
        int ret=0;
        int reuse = 1;
	//ret = setsockopt( server_socket_fd , SOL_SOCKET , SO_REUSEADDR , &server_addr , sizeof( server_addr ) );
        ret = setsockopt( server_socket_fd , SOL_SOCKET , SO_REUSEADDR , &reuse , sizeof(reuse));
	if( ret != 0 )
	{
		perror("setsockopt error");
		exit(1);
	}
        bzero( &server_addr , sizeof( server_addr ) );
	server_addr.sin_family = AF_INET;               
	server_addr.sin_port = htons( HOSTPORT );           
	server_addr.sin_addr.s_addr = inet_addr("192.168.1.3");
	//server_addr.sin_addr.s_addr = htonl( INADDR_ANY ); 
	//bzero( &(server_addr.sin_zero), 8 );              
	ret = bind( server_socket_fd , (struct sockaddr*)&server_addr , sizeof(struct sockaddr) );
	if (ret == -1) 
	{
        perror("bind error");
		exit(1);
	}

	ret = listen( server_socket_fd, MAX_CONNECTION );              
	if (ret == -1) 
	{
		perror("listen error");
		exit(1);
	}

	cout<<"waiting connection...\n"<<endl;
	        len = sizeof(struct sockaddr_in);
	client_socket_fd = accept(server_socket_fd, (struct sockaddr *)&client_addr, &len);
	if( client_socket_fd == -1 )
	{
		perror( "create the client_socket_fd fail" );
		exit( 1 );
	}
        std::cout<<"connection established!\n";  
	cout<<"new connection client_socket_fd is %d\n"<<client_socket_fd<<endl;
        std::cout<<"waiting message...\n";		

	create_all_thread( );

	sleep(1);

       ros::spin();

    
      //  std::cout<<"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"<<std::endl;
	
}

