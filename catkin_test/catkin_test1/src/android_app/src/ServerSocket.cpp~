#include <sys/types.h>  
#include <sys/socket.h>  
#include <stdio.h>  
#include <netinet/in.h>  
#include <arpa/inet.h>  
#include <unistd.h>  
#include <stdlib.h>  
#include <pthread.h>  
#include <cstring>
#include <string.h>
#include <string>
#define  PORT 9400
#define CLIENT_NUM 10
#define BUFFERSIZE 10
void *rec_data(void *fd); 
void init_socket(); 
int main(int argc,char *argv[])  
{  init_socket();
       
       return 0;
}  


void init_socket(){


       int server_sockfd;  
       int *client_sockfd;  
       int server_len;
       
       struct sockaddr_in server_address;  
       struct sockaddr_in client_address;  
       struct sockaddr_in tempaddr;  
       int i,byte;  
       int ListenStatus,BindStatus;
       char char_recv,char_send;  
       socklen_t templen;  
       server_sockfd = socket(AF_INET, SOCK_STREAM, 0);
   
       server_address.sin_family = AF_INET;  
       server_address.sin_addr.s_addr =  htonl(INADDR_ANY);  
       server_address.sin_port = htons(PORT);  
       server_len = sizeof(server_address);  
        
       BindStatus=bind(server_sockfd, (struct sockaddr *)&server_address, server_len);
       if(BindStatus==-1){
        printf("bind error!\n");
       }
      ListenStatus=listen(server_sockfd,CLIENT_NUM);
       if(ListenStatus==-1){
        printf("listen error!\n");
       }
       //templen = sizeof(struct sockaddr);  
       printf("server waiting for connect\n");  
       while(1){  
              pthread_t thread;
              client_sockfd = (int *)malloc(sizeof(int));             
              socklen_t client_len = sizeof(client_address);  
              *client_sockfd = accept(server_sockfd,(struct sockaddr *)&client_address, (socklen_t *)&client_len);
       send(*client_sockfd,"connect successed",strlen("connect successed"),0);

             
              if(-1==*client_sockfd){          
                     perror("accept error!");  
                     continue;  
              }   
             
              if(pthread_create(&thread, NULL, rec_data,  client_sockfd)!=0)
              {  
                     perror("pthread_create error!");  
                     break;  
              }  
       }  
       shutdown(*client_sockfd,2);  
       shutdown(server_sockfd,2);  }
void *rec_data(void *fd)  
{  
       int client_sockfd;  
       int i,byte;  
       char char_recv[BUFFERSIZE];  
       client_sockfd=*((int*)fd);  
       for(;;)  
       {  
            if((byte=recv(client_sockfd,char_recv,BUFFERSIZE,0))==-1)  
              {  
                     perror("recv error");  
                     exit(EXIT_FAILURE);   
                  //cread_socket(); 
              }  
              if(strcmp(char_recv, "")==0){
                     break;  
               }
    
              char_recv[byte]='\0';
              printf(" char_recv:%s\n",char_recv);
send(client_sockfd,"reached",strlen("reached"),0);

       }  
       free(fd);  
       close(client_sockfd);  
       pthread_exit(NULL);  
}  
