#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdlib.h>
#include <iostream>
#include <stdio.h>
#include <pthread.h>

#include "ros/ros.h"
#include "std_msgs/String.h"
#include <sstream>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>
#include "sensor_msgs/LaserScan.h"
#include "actionlib_msgs/GoalID.h"

//#include <geometry_msgs/Point.h>

//#include <move_base_msgs/MoveBaseAction.h>
//#include <actionlib/client/simple_action_client.h>
//typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

#define HOSTPORT			9400
#define MAX_CONNECTION	5
#define MAX_BUFFER 1024

#define GO			1
#define BACK			2
#define LEFT			3
#define RIGHT			4

#define omin_navigation            'q'
#define omin_follow                'w'
#define omin_android_tele          'e'

#define close_omin_navigation      'a'
#define close_omin_follow          's'
#define close_omin_android_tele    'd'

using namespace std;

int cmd1,lastcmd1;
char command[14];
int num=10000;
ros::Publisher vel_pub;
ros::Publisher cancle_pub;
ros::Publisher goal_pub;
ros::Subscriber sub;
ros::Subscriber sub_laser;
double currect_x=0;
double currect_y=0;
double current_orientation_z=0;
double current_orientation_omiga=0;

float goal_x ;
float goal_y;
int a ,b ,c ,d ,e ,f ,g ,h;

char fg;
int server_socket_fd;
int client_socket_fd;
socklen_t len;
struct sockaddr_in server_addr;
struct sockaddr_in client_addr;

void setgoal(float goal_x, float goal_y)
{
	geometry_msgs::PoseStamped msg;
	msg.header.frame_id = "map";
	msg.header.stamp = ros::Time::now();
	msg.pose.position.x=goal_x;
	msg.pose.position.y=goal_y;
	msg.pose.orientation.w=1;
	msg.pose.orientation.z=0;
	goal_pub.publish(msg);
	cout<<"goal_x:"<<goal_x<<"goal_y:"<<goal_y<<endl;
}

void *thread_control( void *arg )
{
	ros::Rate loop_rate(50);
	float x; float y ; float z ;
	cout<<"key control \n"<<endl;

	while(1)
	{ 
        	geometry_msgs::Twist msg;
        	if(num == 2)
		{
			if (lastcmd1!=cmd1)
			{
				//cout<<"cmd1"<<cmd1<<endl;
		        	switch(cmd1)
				{
					case GO :
						{
							x=0.6;y=0;z=0;
				                        msg.linear.x=x;
				                        msg.linear.y=y;
				                        msg.angular.z=z;  
							break;
						}
					case BACK :
						{
							x=-0.6;y=0;z=0;
				                        msg.linear.x=x;
				                        msg.linear.y=y;
				                        msg.angular.z=z;  
							break;
						}						
					case LEFT :
						{
							x=0;y=0;z=1.5;
				                        msg.linear.x=x;
				                        msg.linear.y=y;
				                        msg.angular.z=z;  
							break;
						}						
					case RIGHT :
						{
							x=0;y=0;z=-1.5;
				                        msg.linear.x=x;
				                        msg.linear.y=y;
				                        msg.angular.z=z;  
							break;
						}
					default:	break;
				}  
				vel_pub.publish(msg);
		    		//cout<<"x:"<<x<<"y:"<<y<<"z:"<<z<<endl;
			}
		}
        	else if(num==0)
        	{
			return (NULL);
        	}
           	// vel_pub.publish(msg);
		loop_rate.sleep();
	}
}

void *receive_data_callback( void *arg )
{
	while(ros::ok())
	{
		std::cout<<"socket receive..."<<std::endl;
                num = recv( client_socket_fd , &command , sizeof( command ), 0);
                if (num == 1)
                {
			//std::cout<<command[0]<<std::endl;
                	fg=command[0];
                  	switch( fg )
		  	{
				case omin_navigation:
				{
					actionlib_msgs::GoalID first_goal;
					cancle_pub.publish(first_goal);
					std::cout<<"omin_navigation"<<std::endl;
					ros::param::set("/turtlebot_follower/enabled",false);
					break;
				}
				case close_omin_navigation:
				{
					actionlib_msgs::GoalID first_goal;
					cancle_pub.publish(first_goal);
					std::cout<<"close_omin_navigation"<<std::endl;
					break;
				}
				case omin_follow:
				{
					ros::param::set("/turtlebot_follower/enabled",true);
					ROS_INFO("omin_follow\n");
					break;
				}
				case close_omin_follow:
				{
					ros::param::set("/turtlebot_follower/enabled",false);
					ROS_INFO("close_omin_follow\n");
					break;
				}
				case omin_android_tele:
				{
					ROS_INFO("omin_android_tele\n");
					ros::param::set("/turtlebot_follower/enabled",false);
					break;
				}
				case close_omin_android_tele:
				{
					ROS_INFO("close_omin_android_tele\n");
					ros::param::set("/turtlebot_follower/enabled",false);
					break;
				}						
				default:break;
			}
		}

                else if(num==2)
		{
			if(command[0]=='k')
			{
				cmd1=command[1]-'0';
				cout<<"command[0]   cmd1"<<command[0]<<cmd1<<endl;
			}
			else{
				cmd1=0;
			}
                }
                else if(num==13)
		{
                	std::cout<<command[0]<<command[1]<<command[2]<<command[3]<<command[4]<<command[5]<<command[6]<<command[7]<<command[8]<<command[9];
			std::cout<<command[10]<<command[11]<<command[12]<<command[13]<<std::endl;
			if(command[0]=='n')
			{
				a=command[2]-'0';
				b=command[3]-'0';
				c=command[5]-'0';
				d=command[6]-'0';
			
				e=command[8]-'0';
				f=command[9]-'0';
				g=command[11]-'0';
				h=command[12]-'0';
				if(command[1]=='+')
				{
					goal_x=a*10+b+0.1*c+0.01*d;	
				}
				else
				{
					goal_x=-(a*10+b+0.1*c+0.01*d);				
				}
				if(command[7]=='+')
				{
					goal_y=e*10+f+0.1*g+0.01*h;
				}
				else
				{
					goal_y=-(e*10+f+0.1*g+0.01*h);
				}
			}
			// std::cout<<"goal_x:"<<goal_x<<"goal_y:"<<goal_y<<std::endl;
             		setgoal(goal_x,goal_y);     
		}   
		else if (num==0)
		{
			close( client_socket_fd );
                	close( server_socket_fd );
	        	return 0; 
	     	}
		std::cout<<"num:"<<num<<std::endl;
	}
}
void create_all_thread(void)
{
	pthread_t control_thread ;
	pthread_t receive_data_thread ;

	if( (pthread_create( &control_thread , NULL , thread_control , NULL )) != 0 )
	{
		perror("Create the thread_control fail");
		exit( 1 );
	}
	if( (pthread_create( &receive_data_thread , NULL , receive_data_callback , NULL )) != 0 )
	{
		perror("Create the receive_data_thread fail");
		exit( 1 );
	}
}

void amclPoseCallback(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr& msg)
{
	currect_x=msg->pose.pose.position.x;
	currect_y=msg->pose.pose.position.y;
	current_orientation_z=msg->pose.pose.orientation.z;
	current_orientation_omiga=msg->pose.pose.orientation.w;
	ROS_INFO("call back current_x:%f   current_y:%f   current_z:%f current_w:%f",currect_x,currect_y,current_orientation_z,current_orientation_omiga);
}

int main(int argc,char** argv)
{

	ros::init(argc, argv, "socketTest");
        ros::NodeHandle n;

        ros::Rate loop_rate(0.5);
       
	//sub=n.subscribe("amcl_pose",1000,amclPoseCallback);
        cancle_pub = n.advertise<actionlib_msgs::GoalID>("move_base/cancel",10);
        vel_pub = n.advertise<geometry_msgs::Twist>("teleop_velocity_smoother/raw_cmd_vel", 10);
        goal_pub = n.advertise<geometry_msgs::PoseStamped>("/move_base_simple/goal",10);

        cmd1=0;
        lastcmd1=0;
	server_socket_fd = socket(AF_INET, SOCK_STREAM, 0);      
	if ( server_socket_fd == -1 )  
	{
        perror("get host_socket_fd error");
		exit(1);
	}

        int ret=0;
        int reuse = 1;
	//ret = setsockopt( server_socket_fd , SOL_SOCKET , SO_REUSEADDR , &server_addr , sizeof( server_addr ) );
        ret = setsockopt( server_socket_fd , SOL_SOCKET , SO_REUSEADDR , &reuse , sizeof(reuse));
	if( ret != 0 )
	{
		perror("setsockopt error");
		exit(1);
	}
        bzero( &server_addr , sizeof( server_addr ) );
	server_addr.sin_family = AF_INET;               
	server_addr.sin_port = htons( HOSTPORT );           
	server_addr.sin_addr.s_addr = inet_addr("192.168.1.3");
	//server_addr.sin_addr.s_addr = htonl( INADDR_ANY ); 
	//bzero( &(server_addr.sin_zero), 8 );              
	ret = bind( server_socket_fd , (struct sockaddr*)&server_addr , sizeof(struct sockaddr) );
	if (ret == -1) 
	{
        perror("bind error");
		exit(1);
	}

	ret = listen( server_socket_fd, MAX_CONNECTION );              
	if (ret == -1) 
	{
		perror("listen error");
		exit(1);
	}

	cout<<"waiting connection...\n"<<endl;
	len = sizeof(struct sockaddr_in);
	client_socket_fd = accept(server_socket_fd, (struct sockaddr *)&client_addr, &len);
	if( client_socket_fd == -1 )
	{
		perror( "create the client_socket_fd fail" );
		exit( 1 );
	}
        std::cout<<"connection established!\n";  
	cout<<"new connection client_socket_fd is %d\n"<<client_socket_fd<<endl;
        std::cout<<"waiting message...\n";
		
	create_all_thread( );
	sleep(1);
        ros::spin();
        return 0;
	
}

